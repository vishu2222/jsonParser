//

let str= "freeCodeCamp freeCodeCamp freeCodeCamp";

// console.log(/Code/.test(str));                     //test a pattern is in a string or not
// console.log(/c/i.test(str),' ',/c/.test(str))      // flag i to ignore case (capital or small)
// console.log(str.match(/camp/i))                    // extracting matches
// console.log(str.match(/camp/ig))                   //matching all possible patterns untill the end of the string
// console.log(str.match(/co.../ig))                  //matches all 5 leter patterns starting with co{n dots => 2+n letters}
// console.log(str.match(/cod[ieo]camp/ig))           //matches cod[any of i,e,o]camp  example codicamp
// console.log(str.match(/[d-g]/ig))                   //match all letters from d to g like d,e,f,g


let newStr='vishu1_vishu@2-vishu&3'

// console.log(newStr.match(/[a-z0-9]/ig))            //match all letters and numbers
//console.log(newStr.match(/v|2|@/ig))                // mach v or 2 or @
//console.log(newStr.match(/[^ae1_]/gi))              //dont match these characters

let str1="'vvishu___vvvivishu1822  sss 2'"

//console.log(str1.match(/v+/gi))                       //To find the number of repetions of a letter (one or more times)
//console.log(str1.match(/v*/gi))                      //To find the number of repetions of a letter (zero or more times)
//console.log(str1.match(/'v{1,3}i/gi))                  //to find atleast 1 to 3 times that v repeates before i in the given string
//console.log(str1.match(/_{2,}v/gi))                   // match _ occuring atleast 2 times before the letter v
//console.log(str1.match(/u_{3}v/gi))                     // match _ occuring eactly 3 times before the letter v and after the letter u


//console.log(str1.match(/v[a-z]*u/gi))                  // find largest letter patterns starting with v and ending with u
//console.log(str1.match(/v[a-z]*?u/gi))                 // find smallest letter patterns starting with v and ending with u
//console.log(str1.match(/^'vvis/gi))                     //matching beginning string patterns /^bigining part/
// console.log(str1.match(/22$/gi))                       //matching beginning string patterns /ending part$/

//console.log(str1.match(/\w/gi))                        //match all alphanumerals and underscore _
//console.log(str1.match(/\W/gi))                          // match every thing except letters and numbers
//console.log(str1.match(/\d/gi))                        // match all numbers
//console.log(str1.match(/\D/gi))                        // match all non numbers
//console.log(str1.match(/\s/gi))                          //match all white spaces
//console.log(str1.match(/\S/gi))                        //everything except white spaces



let s='color'
//console.log(s.match(/colou?r/gi))                 //match if u exists or not


let password = "abc123";

//console.log(password.match(/(?=\w{3,6})(?=\D*\d)/)) //password should have 3 to 6 characters and at least one number
// (?=) means to look ahead to search for patterns. we can use (?= )(?= ) to find multiple patterns

                                       //(capture groups)

//   /(\w+)\s\1/      matches any word that occurs twice separated by a space

//    "Code Camp".replace(/(\w+)\s(\w+)/, '$2 $1');             // returns camp code

// use  String.prototype.trim()  to remove white spaces at the begining and ending of a string



//          .                    any character except newLine
//          \d                   Digits 0-9
//          \D                   Not a digit 0-9
//          \w                   word character (_,a-z,A-Z,0-9)
//          \W                   Not a word character
//          \s                   (space, tab, newLine)
//          \S                   Not (space, tab, newLine)


//Anchors

//          \b                   word boundary(search words only if they have a boundary(seperated by a space newLine))
//                                (for 2 boundary search \b\wordb)
//          \B                   Not a word boundary
//           ^                   Beginning of a string
//           $                   End of a string


//          []                   character set, matches characters in brackets
//          [^]                  matches characters not in brackets
//           |                   Either or or
//          ( )                  Group



// Quantifiers

//          *                   0 or more
//          +                   1 or more
//          ?                   o or 1
//         {3}                  exact number
//         {3,4}                range of numbers {min,max}




// string parser regex
// function stringParserRegex (input) {
//   const strRegex = /^"[^"\\]*(\\["bfnrt\/]|\\u[a-fA-F\d]{4}|[^"\\]*)*"/
//   const strOutput = input.match(strRegex)
//   if (strOutput === null) {
//     return null
//   }
//   return [strOutput[0], input.slice(strOutput[0].length)]
// }

// console.log(stringParserRegex('"..."'))



// json.org documentation
// https://www.ietf.org/rfc/rfc4627.txt


// no-control-char  
// https://eslint.org/docs/latest/rules/no-control-regex
// https://deepsource.io/gl/blurt/blurt/issue/JS-0004/occurrences
// https://rules.sonarsource.com/javascript/RSPEC-6324


// string parsing regex
// https://bl.ocks.org/goodmami/02f344e8c9a22fc9ac879230a9b9e071
// /^"[^"\\]*(\\["bfnrt\/]|\\u[a-fA-F\d]{4}|[^"\\]*)*"/
// /"(\\.|[^"\\]*)*"/
// /"[^"\\]*(?:\\.|[^"\\]*)*"/
// /^\s*"((\\(["\\\/bfnrt]|u[a-fA-F0-9]{4})|[^"\\\0-\x1F\x7F]+)*)"\s*/


// regex visual
// https://regexper.com/


// regex tutorial
// https://medium.com/factory-mind/regex-tutorial-a-simple-cheatsheet-by-examples-649dc1c3f285




// string parser
function stringParser (input) {
  input = input.trim()
  if (!input.startsWith('"')) { return null }
  input = input.slice(1)
  let str = ''
  const escChars = {
    '"': '"',
    '\\': '\\',
    '/': '/',
    b: '\b',
    f: '\f',
    n: '\n',
    r: '\r',
    t: '\t',
    u: null
  }
  while (input[0]) {
    if (input[0] === '"') { return [str, input.slice(1)] } // " without escape occurs at end of string
    if (input[0].match(/[\u0000-\u001f]/i)) { return null } // control characters
    if (input[0] === '\\') { // escape / sould be followed by any of n,/,f,r,b,t,u,\"
      if (input[1] === 'u') {
        const temp = input.slice(2, 6)
        if (temp.match(/[a-f0-9]{4}/i) === null) { return null } // validate hexcode
        str += String.fromCharCode(parseInt(temp, 16))
        input = input.slice(6)
      } else if (Object.keys(escChars).includes(input[1])) {
        str += escChars[input[1]]
        input = input.slice(2)
      } else { return null } // anything else after \ is invalid
    } else {
      str += input[0]
      input = input.slice(1)
    }
  }
  return null
}
  
  
  // const input1 = '"abcdef\\t.1\\u006Fxyz\\\\abcd"efghabcd'
  // const input2 = '"abcdef\\t.1\\u006Fxyz\\\\abcdefghi\\\\"efghabcd"'
  // const input3 = '"RT @TwitterDev: 1/ Today weâ€™re sharing our vision for the future of the Twitter API platform!\nhttps://t.co/XweGngmxlP"'
  // console.log(strParser(input1))
  // console.log(strParser(input2))
  // console.log(strParser(input3))
  
  console.log(strParser('"abced\\nef"'))
  

  // https://regexper.com/#%2F%5E-%3F%28%28%5B1-9%5D%5Cd*%29%7C0%29%28%5C.%5Cd%2B%29%3F%28%28e%7CE%29%5B%2B-%5D%3F%5Cd%2B%29%3F%2F
const numParserPassCases = ['0', '0a', '-0', '0.0', '2.3', '-0.0', '-1.23', '0.5', '12.323', '0.', '-1', '00',
'00.', '1.2Eabc', '1.2E2bc', '1.abc', '1e-5', '0e3', '0.1e1', '0.e9', '1.e9',
'1e0', '2E256', '-12.e45', '2e+-4', '123.456e-789']

const numParserfailCases = ['a.', '.a', '-', 'e1', '.', '-+', 'abc198', 'a0', '-', '.01e', '.0', '+0.', '+4',
'+0.05']

console.log(numParserPassCases, numParserfailCases)


  // const illegalEscReg = /[\n\t\b\f\r\u0000-\u001f]/ // \n\t\b\f\r may be removed
  // const illegalEscReg = /[\ca-\cz]/i // ctrl+A to crtl+X or \x01 through \x1A




  // const input = 'a\x15'
// console.log(input)
// const escRegex = /.*\\x{1}.*/g
// console.log(input.match(escRegex))

// console.log(JSON.parse('"a\x1111"')) // \b \f \n  \r \t \v

// const char = '\0x1F'
// console.log(JSON.stringify(String.fromCharCode(char.charCodeAt(0))))
// console.log(String.fromCharCode(char.charCodeAt(0)) === '\u0001')
// const newRegex = /[\ca-\cz]/i // ctrl+A to crtl+X or \x01 through \x1A
// const newRegex2 = /\\u0015/i
// const newRegex3 = /[\ca-\cz\c@-\c_]/i // \c@ through \c_
// console.log(char.match(newRegex))
// console.log(char.match(newRegex2))
// console.log(char.match(newRegex3))

// console.log(JSON.parse('"\u0000"'))
// console.log('\u0000'.length)

// const escapeCharacters = {
//     '"': '"',
//     '\\': '\\',
//     '/': '/',
//     b: '/b',
//     f: '/f',
//     n: '\n',
//     r: '\r',
//     t: '\t',
//     u: null
//   }

// const ch = ['\n', '\\']
// const reg = /[\n\t\b\f\r\u0000-\uffff]/
// ch.forEach(i => {
// //   console.log(JSON.parse('"' + i + '"'))
//   console.log(i.match(reg))
// })

// console.log(JSON.parse('"\\uf001"'))

// const input = '["Illegal backslash escape: \x15"]'
// console.log('\x15'.length)

// string parser
function stringParser (input) {
  input = input.trim()
  if (!input.startsWith('"')) { return null } // string should start with "
  input = input.slice(1)
  const escapeCharacters = {
    '"': '"',
    '\\': '\\',
    '/': '/',
    b: '/b',
    f: '/f',
    n: '\n',
    r: '\r',
    t: '\t',
    u: null
  }
  let str = ''
  // const illegalEscReg = /[\n\t\b\f\r\u0000-\u001f]/ // \n\t\b\f\r may be removed
  // const illegalEscReg = /[\ca-\cz]/i // ctrl+A to crtl+X or \x01 through \x1A
  while (input[0] !== undefined) {
    if (input[0] === '"') { return [str, input.slice(1)] }
    // if (input.match(illegalEscReg) !== null) { return null } // they should be followed by a https://www.ietf.org/rfc/rfc4627.txt
    if (input[0] === '\\') {
      if (input[1] === 'u') {
        // const temp = 
        if (input.slice(2, 6).match(/[a-f0-9]{4}/i) === null) { return null }
        str += String.fromCharCode(parseInt(input.slice(2, 6), 16))
        input = input.slice(6)
      } else if (escapeCharacters.hasOwnProperty(input[1])) {
        str += escapeCharacters[input[1]]
        input = input.slice(2)
      } else { // if not " or illegal char or escape char
        return null
      }
    }
    str += input[0]
    input = input.slice(1)
  }
  return null
}
// const input = '"\u0123\u4567\u89AB\uCDEF\uabcd\uef4A"'
// console.log(stringParser(input))
// console.log(JSON.parse(input))

// const input = '"	kkk	character	in	string	"'

// console.log(input[0].match(/[\n\t\b\f\r\u0000-\u001f]/))

// console.log(JSON.stringify('/'))
// console.log(JSON.stringify('\/'))
const input = '\x00ghjg'
console.log(input[0].match(/[\u0000-\u001f]/i))
